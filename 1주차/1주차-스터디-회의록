## 간단 정리
JDK : java를 **개발하고 실행**까지할 수 있는 kit (도구) (jre도 포함)

JRE : java로 만들어진 애플리케이션을 실행할 수 있는 환경 (얘는 자바 애플리케이션을 실행시킬 수 있는 놈, JVM )

JVM : 컴파일된 자바파일(.class)을 해석해주는 머신 (해석뿐만이 아님, 동적 로딩, 메모리 자원 할당 등 다양함)

---

java는 운영체제 독립적이지만, JVM은 운영체제 종속적이다.

- 바이트 코드를 리눅스에 맞는 기계어로 해석해줄 수 있는 jvm
- 바이트 코드를 윈도우에 맞는 기계어로 해석해줄 수 있는 jvm
- 바이트 코드를 맥에 맞는 기계어로 해석해줄 수 있는 jvm

---

jvm의 동작 과정에서 동적 로딩의 유형이 2가지가 있는데, load-time 동적 로딩, runtime 동적 로딩이 있다.


```
//load-time 예시
public class Hello { 
	public static void main(String[] args) { 
		System.out.println(“Hello Java”);  
	}  
} 
```
Hello 객체를 실행하려는데, 내부에 String과 System이라는 클래스가 있어야 실행할 수 있다.
그렇기 때문에 JVM은 Hello를 실행하려고 할 때 String, System을 미리 로딩하고 Hello를 실행


```
//runtime 예시
public class Hello {  
	public static void main(String[] args) {  
		Class c1 = Class.forName(args[0]); 
	}  
} 
```
> Class.forName()은 클래스로더를 통해서 특정 모듈을 로드

Hello를 실행할 때, Class.forName()이 실행되기 전까지는 Hello클래스에서 어떤 클래스를 참조하는지 알 수 없다.
Hello클래스의 main() 메서드가 실행되고 Class.forName(args[0])을 호출하는 순간에 args [0]에 해당하는 클래스를 읽어온다.

즉, 클래스를 로딩할 때가 아닌 코드를 실행하는 순간에 클래스를 로딩하는 것.

---

인터프리터는 내가 작성한 코드 한줄씩 한줄씩
컴파일러는 내가 작성한 코드 전부 해석

실행속도는 인터프리터 > 컴파일러

그 이유는 인터프리터는 해석 실행 해석 실행 해석 실행 (얘는 안생겨요. )
컴파일러 작성한 코드 싹다 해석하고 한번 실행 -> 목적 코드가 생긴다. (executable file)

자주 빈번하게 실행하면 컴파일러 > 인터프리터

컴파일러는 목적파일을 다시 링킹해서 그대로 실행
인터프리터는 뭐 목적 코드가 안생겨서 처음부터 다시 수행

visual studio 써보면 코드 처음 실행할때는 조금 느린때(2초) 아무거도 안바꾸고 그대로 다시 수행하면 0.1초 만에 실행되는 경험

---

JVM은 자바 바이트 코드를 실행할 수 있는 주체로서 Class loader, Execution Engine, Garbage Collector, Runtime Data Area로 구성되어 있다.

- Class Loader : 컴파일러를 통해 생성된 바이트 코드를 메모리 영역인 Runtime Data Area에 적재하는 역할을 한다.
  1. load-time dl
  2. runtime dl
  
- Execution Engine : 메모리에 적재된 바이트 코드를 기계어로 변경해 실행한다. 실행 방법은 인터프리터 방식, JIT 컴파일러가 존재한다.
    1. 인터프리터 : 명령어 단위로 해석하여 실행하는 방법
    2. JIT 컴파일러 : 바이트 코드를 네이티브 코드로 컴파일 하여 실행하는 방법
    
- Garbage Collector : Heap 메모리에 생성된 객체들 중 더 이상 참조되지 않은 객체를 제거하는 역할을 하며 GC가 실행되는 동안 다른 모든 쓰레드가 정지된다. 
(가비지 콜렉터 있어도 메모리 누수된다.)

- Runtime Data Area(자바 메모리) : 자바 애플리케이션을 실행할 때 사용 되는 데이터들을 적재하는 메모리 영역으로, Method Area, Heap Area, Stack Area, PC Register, Native Method Stack으로 구성된다.
    1. Method Area : 클래스 정보, static 변수, final class 등이 생성되는 영역이다.
    2. Heap Area : new 키워드로 생성된 객체와 배열이 생성되는 영역으로 메소드 영역에 생성된 클래스만 생성이 가능하다.
    3. Stack Area : 지역 변수, 파라미터, 리턴 값 등이 생성되는 영역이다.
    4. PC Register(pc) : 쓰레드가 생성될 때마다 생성되며 쓰레드가 실행되는 부분의 주소와 명령을 저장하는 영역이다.
    5. Native Method Stack : 자바 이외의 언어로 작성된 코드를 위한 메모리 영역이다.

### 컴파일 및 실행

1. 개발자가 작성한 자바 코드는 컴파일러를 통해 바이트 코드로 컴파일 한다.
2. JVM은 프로그램을 실행하는데 필요한 메모리를 OS로 부터 할당 받는다.
3. 이후, 클래스 로더를 통해 런타임 데이터 영역(jvm의 메모리)에 바이트 코드를 적재한다.
4. 실행 엔진을 통해 바이트 코드를 명령어 단위로 읽고 기계어로 해석 후 실행 시킨다.


## 다음편
객체지향 (절차지향과 함수형 프로그래밍)
